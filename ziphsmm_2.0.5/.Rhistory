if(k!=i){
vec1 <- pp[k,j,1:(m-1)]
normalizer <- sapply(1:(m-1),function(n) sum(cdfs[i,,n]))
vec2 <- densities[i,k,1:(m-1)] * cdfs[i,k,1:(m-1)] / normalizer
pp[i,j,m] <- pp[i,j,m] + h*convr(vec1,vec2,m)
}
}
}
}
}
for(i in 1:M) pp[i,i,m] <- max(0,1 - sum(pp[i,,m]))
}
return(pp[,,ngrid])
}
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
smp(parmmat,3,1,50,0.05)
smp(parmmat,3,4,50,0.05)
smp2(3,1,4,2, time=10, ngrid=20, lower=0.05)
smp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,20,0.05)
smp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,50,0.05)
#########
#general case:
#each row of parmmat is the offdiagonal gamma shape and scale
smp <- function(parmmat, M, time, ngrid, lower){
pp <- array(0,dim=c(M,M,ngrid))
pp[,,1] <- diag(1,M) #initialize pp at 0
grids <- seq(lower, time, length=ngrid)
h <- median(diff(grids))
densities <- array(0, dim=c(M,M,ngrid))
cdfs <- array(0, dim=c(M,M,ngrid))
for(m in 1:ngrid){
nextindex <- 1
for(i in 1:M) {
for(j in 1:M){
if(i!=j){
densities[i,j,m] <- dgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
cdfs[i,j,m] <- pgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
nextindex <- nextindex + 1
}
}
}
}
for(m in 2:ngrid){
for(i in 1:M){
for(j in 1:M){
if(i!=j){
pp[i,j,m] <- 0
for(k in 1:M){
if(k!=i){
vec1 <- pp[k,j,1:(m-1)]
vec2 <- rep(NA, m-1)
for(n in 1:(m-1)){
vec2 <- densities[i,k,n]*cdfs[i,k,n]/sum(cdfs[i,,n])
}
pp[i,j,m] <- pp[i,j,m] + h*convr(vec1,vec2,m)
}
}
}
}
}
for(i in 1:M) pp[i,i,m] <- max(0,1 - sum(pp[i,,m]))
}
return(pp[,,ngrid])
}
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
smp(parmmat,3,1,50,0.05)
smp(parmmat,3,4,50,0.05)
i=1
j=2
m=2
k=2
vec1 <- pp[k,j,1:(m-1)]
vec2 <- rep(NA, m-1)
for(n in 1:(m-1)){
vec2 <- densities[i,k,n]*cdfs[i,k,n]/sum(cdfs[i,,n])
}
h*convr(vec1,vec2,m)
#########
#general case:
#each row of parmmat is the offdiagonal gamma shape and scale
smp <- function(parmmat, M, time, ngrid, lower){
pp <- array(0,dim=c(M,M,ngrid))
pp[,,1] <- diag(1,M) #initialize pp at 0
grids <- seq(lower, time, length=ngrid)
h <- median(diff(grids))
densities <- array(0, dim=c(M,M,ngrid))
cdfs <- array(0, dim=c(M,M,ngrid))
for(m in 1:ngrid){
nextindex <- 1
for(i in 1:M) {
for(j in 1:M){
if(i!=j){
densities[i,j,m] <- dgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
cdfs[i,j,m] <- pgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
nextindex <- nextindex + 1
}
}
}
}
for(m in 2:ngrid){
for(i in 1:M){
for(j in 1:M){
if(i!=j){
pp[i,j,m] <- 0
for(k in 1:M){
if(k!=i){
vec1 <- pp[k,j,1:(m-1)]
vec2 <- rep(NA, m-1)
for(n in 1:(m-1)){
vec2[n] <- densities[i,k,n]*cdfs[i,k,n]/sum(cdfs[i,,n])
}
pp[i,j,m] <- pp[i,j,m] + h*convr(vec1,vec2,m)
}
}
}
}
}
for(i in 1:M) pp[i,i,m] <- max(0,1 - sum(pp[i,,m]))
}
return(pp[,,ngrid])
}
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
smp(parmmat,3,1,50,0.05)
smp(parmmat,3,4,50,0.05)
smp2(3,1,4,2, time=10, ngrid=20, lower=0.05)
smp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,50,0.05)
parmmat <- matrix(c(2,0.5,1,1,4,2,2,1,3,0.5,2,2),6,2,byrow=T)
smp(parmmat,3,1,50,0.05)
smp(parmmat,3,6,50,0.05)
smp(parmmat,3,11,50,0.05)
smp(parmmat,3,100,50,0.05)
smp2(3,1,4,2, time=100, ngrid=20, lower=0.05)
smp(parmmat,3,10,100,0.05)
parmmat <- matrix(c(2,0.5,1,2,4,2,2,1,3,0.5,2,2),6,2,byrow=T)
smp(parmmat,3,1,50,0.05)
smp(parmmat,3,10,100,0.05)
smp2(3,1,4,2, time=10, ngrid=20, lower=0.05)
smp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
smp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
convr <- function(vec1, vec2, m){
result <- 0
for(i in 1:(m-1)) result <- result + vec1[m-i] * vec2[i]
return(result)
}
smp <- function(parmmat, M, time, ngrid, lower){
pp <- array(0,dim=c(M,M,ngrid))
pp[,,1] <- diag(1,M) #initialize pp at 0
grids <- seq(lower, time, length=ngrid)
h <- median(diff(grids))
densities <- array(0, dim=c(M,M,ngrid))
cdfs <- array(0, dim=c(M,M,ngrid))
for(m in 1:ngrid){
nextindex <- 1
for(i in 1:M) {
for(j in 1:M){
if(i!=j){
densities[i,j,m] <- dgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
cdfs[i,j,m] <- pgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
nextindex <- nextindex + 1
}
}
}
}
for(m in 2:ngrid){
for(i in 1:M){
for(j in 1:M){
if(i!=j){
pp[i,j,m] <- 0
for(k in 1:M){
if(k!=i){
vec1 <- pp[k,j,1:(m-1)]
#must normalize!!!
vec2 <- rep(NA, m-1)
for(n in 1:(m-1)){
vec2[n] <- densities[i,k,n]*cdfs[i,k,n]/sum(cdfs[i,,n])
}
pp[i,j,m] <- pp[i,j,m] + h*convr(vec1,vec2,m)
}
}
}
}
}
for(i in 1:M) pp[i,i,m] <- max(0,1 - sum(pp[i,,m]))
}
return(pp[,,ngrid])
}
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
smp(parmmat,3,time=1,50,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
smprcpp(parmmat,3,1,50,0.05)
smp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,50,0.05)
smprcpp(matrix(c(3,1,4,2),2,2,byrow=T),2,10,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
smprcpp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
smprcpp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=1,50,0.05)
parmmat <- matrix(c(2,0.5,1,2,4,2,2,1,3,0.5,2,2),6,2,byrow=T)
smp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=10,100,0.05)
smp(parmmat,3,time=1,50,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
proc.time(smp(parmmat,3,time=1,50,0.05))
system.time(smp(parmmat,3,time=1,50,0.05))
system.time(smprcpp(parmmat,3,time=1,50,0.05))
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=10,100,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=10,100,0.05)
smp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
convr <- function(vec1, vec2, m){
result <- 0
for(i in 1:(m-1)) result <- result + vec1[m-i] * vec2[i]
return(result)
}
smp <- function(parmmat, M, time, ngrid, lower){
pp <- array(0,dim=c(M,M,ngrid))
pp[,,1] <- diag(1,M) #initialize pp at 0
grids <- seq(lower, time, length=ngrid)
h <- median(diff(grids))
densities <- array(0, dim=c(M,M,ngrid))
cdfs <- array(0, dim=c(M,M,ngrid))
for(m in 1:ngrid){
nextindex <- 1
for(i in 1:M) {
for(j in 1:M){
if(i!=j){
densities[i,j,m] <- dgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
cdfs[i,j,m] <- pgamma(grids[m],
shape=parmmat[nextindex,1],
scale=parmmat[nextindex,2])
nextindex <- nextindex + 1
}
}
}
}
for(m in 2:ngrid){
for(i in 1:M){
for(j in 1:M){
if(i!=j){
pp[i,j,m] <- 0
for(k in 1:M){
if(k!=i){
vec1 <- pp[k,j,1:(m-1)]
#must normalize!!!
vec2 <- rep(NA, m-1)
for(n in 1:(m-1)){
vec2[n] <- densities[i,k,n]*cdfs[i,k,n]/sum(cdfs[i,,n])
}
pp[i,j,m] <- pp[i,j,m] + h*convr(vec1,vec2,m)
}
}
}
}
}
for(i in 1:M) pp[i,i,m] <- max(0,1 - sum(pp[i,,m]))
}
return(pp[,,ngrid])
}
parmmat <- matrix(c(2,1,2,1,2,1,2,1,2,1,2,1),6,2,byrow=T)
system.time(smp(parmmat,3,time=1,50,0.05))
system.time(smprcpp(parmmat,3,time=1,50,0.05))
smp(parmmat,3,time=1,50,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=4,50,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
smp(parmmat,3,time=4,50,0.05)
smprcpp(parmmat,3,time=4,50,0.05)
parmmat <- matrix(c(2,0.5,1,2,4,2,2,1,3,0.5,2,2),6,2,byrow=T)
smp(parmmat,3,time=1,50,0.05)
smprcpp(parmmat,3,time=1,50,0.05)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
set.seed(12933)
nsubj <- 20
ns <- 4000
ylist <- vector(mode="list",length=nsubj)
xlist <- vector(mode="list",length=nsubj)
timelist <- vector(mode="list",length=nsubj)
priorparm1 <- 0
priorparm2 <- 1
tpmparm1 <- c(-2,-2)
tpmparm2 <- c(0,0)
zeroparm <- c(-2,0)
emitparm <- c(4,0, 6,0)
zeroindex <- c(1,0)
for(n in 1:nsubj){
xlist[[n]] <- matrix(rep(c(0,1,0,1),rep(1000,4)),nrow=4000,ncol=1)
timeindex <- rep(1,4000)
for(i in 2:4000) timeindex[i] <- timeindex[i-1] + sample(1:4,1)
timelist[[n]] <- timeindex
if(n<=10){
workparm <- c(priorparm1,tpmparm1,zeroparm,emitparm)
}else{
workparm <- c(priorparm2,tpmparm2,zeroparm,emitparm)
}
result <- hmmsim2.cont(workparm,2,4000,zeroindex,emit_x=xlist[[n]],
zeroinfl_x=xlist[[n]],timeindex=timeindex)
ylist[[n]] <- result$series
}
prior_init=c(0.5,0.5)
tpm_init=matrix(c(-0.1,0.1,0.1,-0.1),2,2,byrow=TRUE)
zero_init=0.2
emit_init=c(50,400)
M <- 2
priorclust <- NULL
tpmclust <- c(rep(1,10),rep(2,10))
zeroclust <- rep(1,20)
emitclust <- rep(1,20)
slopeclust <- rep(1,20)
priorclust <- c(rep(1,10),rep(2,10))
zeroclust <- NULL
emitclust <- NULL
group <- vector(mode="list",length=2)
group[[1]] <- 1:10; group[[2]] <- 11:20
time <- proc.time()
result <- dist_learn2(ylist, xlist, timelist, prior_init, tpm_init,
emit_init, zero_init, NULL, rho=0.01, priorclust,tpmclust,
emitclust,zeroclust,slopeclust,group,
maxit=30, tol=1e-4, method="CG",print=TRUE)
proc.time() - time
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
set.seed(12933)
time <- proc.time()
result <- dist_learn2(ylist, xlist, timelist, prior_init, tpm_init,
emit_init, zero_init, NULL, rho=0.01, priorclust,tpmclust,
emitclust,zeroclust,slopeclust,group,
maxit=30, tol=1e-4, method="CG",print=TRUE)
time <- proc.time()
result <- dist_learn2(ylist, xlist, timelist, prior_init, tpm_init,
emit_init, zero_init, NULL, rho=0.001, priorclust,tpmclust,
emitclust,zeroclust,slopeclust,group,
maxit=30, tol=1e-4, method="CG",print=TRUE)
proc.time() - time
rm(list=ls())
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
set.seed(12933)
nsubj <- 20
ns <- 4000
ylist <- vector(mode="list",length=nsubj)
xlist <- vector(mode="list",length=nsubj)
timelist <- vector(mode="list",length=nsubj)
priorparm1 <- 0
priorparm2 <- 1
tpmparm1 <- c(-2,-2)
tpmparm2 <- c(0,0)
zeroparm <- c(-2,0)
emitparm <- c(4,0, 6,0)
zeroindex <- c(1,0)
for(n in 1:nsubj){
xlist[[n]] <- matrix(rep(c(0,1,0,1),rep(1000,4)),nrow=4000,ncol=1)
timeindex <- rep(1,4000)
for(i in 2:4000) timeindex[i] <- timeindex[i-1] + sample(1:4,1)
timelist[[n]] <- timeindex
if(n<=10){
workparm <- c(priorparm1,tpmparm1,zeroparm,emitparm)
}else{
workparm <- c(priorparm2,tpmparm2,zeroparm,emitparm)
}
result <- hmmsim2.cont(workparm,2,4000,zeroindex,emit_x=xlist[[n]],
zeroinfl_x=xlist[[n]],timeindex=timeindex)
ylist[[n]] <- result$series
}
prior_init=c(0.5,0.5)
tpm_init=matrix(c(-0.1,0.1,0.1,-0.1),2,2,byrow=TRUE)
zero_init=0.2
emit_init=c(50,400)
####
M <- 2
priorclust <- NULL
tpmclust <- c(rep(1,10),rep(2,10))
zeroclust <- rep(1,20)
emitclust <- rep(1,20)
slopeclust <- rep(1,20)
priorclust <- c(rep(1,10),rep(2,10))
zeroclust <- NULL
emitclust <- NULL
group <- vector(mode="list",length=2)
group[[1]] <- 1:10; group[[2]] <- 11:20
###
time <- proc.time()
result <- dist_learn2(ylist, xlist, timelist, prior_init, tpm_init,
emit_init, zero_init, NULL, rho=0.001, priorclust,tpmclust,
emitclust,zeroclust,slopeclust,group,
maxit=30, tol=1e-4, method="CG",print=TRUE)
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
devtools::use_build_ignore("cran-comments.md")
devtools::use_build_ignore("test.R")
devtools::use_build_ignore("testcont.R")
devtools::check()
devtools::build()
devtools::build_win() #check windows
require("Rcpp")
setwd("~/Desktop/myRpackage")
compileAttributes("ziphsmm_2.0.5")
setwd("~/Desktop/myRpackage/ziphsmm_2.0.5")
devtools::document()
devtools::load_all()
#devtools::use_package("pracma")
###############################################
devtools::use_build_ignore("cran-comments.md")
devtools::use_build_ignore("test.R")
devtools::use_build_ignore("testcont.R")
devtools::check()
devtools::release("~/Desktop/myRpackage/ziphsmm_2.0.5")
